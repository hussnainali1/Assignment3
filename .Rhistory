devtools::load_all(".")
library(devtools)
library(devtools)
library(usethis)
use_mit_license()
check()
check()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
dijkstra
euclidean
euclidean(100,1000)
library(assignment3)
?euclidean
??euclidean
library(assignment3)
?euclidean
library(assignment3)
?euclidean
library(assignment3)
?euclidean
library(assignment3)
?euclidean
library(assignment3)
?euclidean
library(assignment3)
?euclidean
library(assignment3)
?euclidean
library(assignment3)
?euclidean
#'
#' @param a A number.
#' @param b A number.
#'
#' @return A number.
#' @export
#'
#' @examples
#' euclidean(100,1000)
#' euclidean(123612, 13892347912)
euclidean <- function(a,b){
answer <-  1
loopCounter <- 2
while( loopCounter <= a){
modCal1= a%%loopCounter
modCal2= b%%loopCounter
if(modCal1==0 && modCal2==0){
answer <- loopCounter
}
loopCounter=loopCounter+1
}
return(answer)
}
library(assignment3)
?euclidean
library(usethis)
check()
library(assignment3)
library(assignment3)
?euclidean
check()
library(assignment3)
?dijkstra
library(assignment3)
?dijkstra
usethis::use github action check standard()
usethis::use_github_action_check_standard()
usethis::use_github_action_check_standard()
library(devtools)
library(usethis)
library(roxygen2)
check()
rm()
load_all()
rm(list = c('euclidean'))
load_all()
check()
?dijkstra
devtools::load_all(".")
?dijkstra
rm(list = c('euclidean'))
devtools::load_all(".")
?dijkstra
devtools::load_all(".")
?dijkstra
devtools::load_all(".")
devtools::load_all(".")
?dijkstra
wiki_graph <-
data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
use_data(wiki_graph)
liberary(devtool)
liberary(devtools)
library(devtools)
library(roxygen2)
library(usethis)
use_data(wiki_graph)
use_r("data")
devtools::load_all(".")
devtools::load_all(".")
use_testthat()
use_that()
library(devtools)
library(usethis)
library(roxygen2)
load_all()
use_testthat()
use_that()
use_that()
usethis::use_that()
use_test()
devtools::load_all(".")
test()
test()
test()
test()
euclidean(-100,1000)
-100%%1
-100%%2
(-100)%%2
(100)%%2
euclidean(100,1000)
euclidean(-100,1000)
-11/1
-11/-1
test()
dijkstra(wiki_graph, 7)
dijkstra(wiki_graph, 3)
wiki_graph$v1
stopifnot(wiki_graph$v1)
stopifnot(exist(wiki_graph$v1)
stopifnot(exist(wiki_graph$v1))
stopifnot(exists(wiki_graph$v1))
exists(wiki_graph,v1)
exists(wiki_graph,wiki_graph$v1)
unlist(wiki_graph)
wiki_graph$v2
wiki_graph$v4
stop(wiki_graph$v1==NULL)
is_null(wiki_graph$v5)
is.null(wiki_graph$v5)
test()
dijkstra(wiki_graph,1)
dijkstra(wiki_graph,1)
dijkstra(wiki_graph,1)
dijkstra <- function(wiki_graph, a){
stopifnot(is.data.frame(wiki_graph), is.numeric(a))
uniqueVal <- unique(wiki_graph[[1]]) #nodes
finalFrame = data.frame("node"= uniqueVal,"distance"= rep(Inf, length(uniqueVal)), "visited"=  rep(FALSE, length(uniqueVal)) )
finalFrame[[2]][which(finalFrame[[1]]==a)]=0
finalFrame
visited <- c()
while(length(uniqueVal)>0){
minIndex <-as.numeric(min(finalFrame[[2]][finalFrame[[3]]==FALSE]))
initialNode <- finalFrame$node[finalFrame$visited==FALSE & finalFrame$distance == minIndex][1]
finalFrame[[3]][which(finalFrame[[1]]==initialNode)] <- TRUE
nabours <- wiki_graph$v2[which(wiki_graph$v1==initialNode)]
nabours <- nabours[nabours %in% uniqueVal]
for(item in nabours){
distanCalc <- wiki_graph$w[wiki_graph$v1==initialNode & wiki_graph$v2==item]
distanCalc= distanCalc + finalFrame$distance[finalFrame$node==initialNode]
oldDistance <- finalFrame$distance[finalFrame$node==item]
oldDistance
if(distanCalc < oldDistance){
finalFrame$distance[which(finalFrame$node==item)]=distanCalc
finalFrame
}
}
uniqueVal <- uniqueVal[uniqueVal!= initialNode]
}
return(finalFrame$distance)
}
dijkstra(wiki_graph,1)
dijkstra <- function(wiki_graph, a){
stop(is.null(wiki_graph$v1) || is.null(wiki_graph$v2) || is.null(wiki_graph$w))
stopifnot(is.data.frame(wiki_graph), is.numeric(a))
uniqueVal <- unique(wiki_graph[[1]]) #nodes
finalFrame = data.frame("node"= uniqueVal,"distance"= rep(Inf, length(uniqueVal)), "visited"=  rep(FALSE, length(uniqueVal)) )
finalFrame[[2]][which(finalFrame[[1]]==a)]=0
finalFrame
visited <- c()
while(length(uniqueVal)>0){
minIndex <-as.numeric(min(finalFrame[[2]][finalFrame[[3]]==FALSE]))
initialNode <- finalFrame$node[finalFrame$visited==FALSE & finalFrame$distance == minIndex][1]
finalFrame[[3]][which(finalFrame[[1]]==initialNode)] <- TRUE
nabours <- wiki_graph$v2[which(wiki_graph$v1==initialNode)]
nabours <- nabours[nabours %in% uniqueVal]
for(item in nabours){
distanCalc <- wiki_graph$w[wiki_graph$v1==initialNode & wiki_graph$v2==item]
distanCalc= distanCalc + finalFrame$distance[finalFrame$node==initialNode]
oldDistance <- finalFrame$distance[finalFrame$node==item]
oldDistance
if(distanCalc < oldDistance){
finalFrame$distance[which(finalFrame$node==item)]=distanCalc
finalFrame
}
}
uniqueVal <- uniqueVal[uniqueVal!= initialNode]
}
return(finalFrame$distance)
}
dijkstra(wiki_graph,1)
is.null(wiki_graph$v1)
is.null(wiki_graph$v2)
is.null(wiki_graph$w)
stop(is.null(wiki_graph$v1) || is.null(wiki_graph$v2) || is.null(wiki_graph$w))
stopifnot(is.null(wiki_graph$v1) || is.null(wiki_graph$v2) || is.null(wiki_graph$w))
stopifnot(is.null(wiki_graph$v1) || is.null(wiki_graph$v2) || is.null(wiki_graph$w))  stopifnot(!is.null(wiki_graph$v1), !is.null(wiki_graph$v2), !is.null(wiki_graph$w))
stopifnot(!is.null(wiki_graph$v1), !is.null(wiki_graph$v2), !is.null(wiki_graph$w))
3 %in% wiki_graph$v1
library(devtools)
library(usethis)
library(devtools)
library(roxygen2)
devtools::load_all(".")
devtools::load_all(".")
